
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `src/hc21_ste_decoder.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: src/hc21_ste_decoder.v
Parsing Verilog input from `src/hc21_ste_decoder.v' to AST representation.
Generating RTLIL representation for module `\hc21_ste_decoder'.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:47.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:48.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:49.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:50.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:51.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:52.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:53.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:54.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:55.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:56.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:57.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:61.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:62.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:63.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:64.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:65.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:66.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:67.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:68.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:69.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:70.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:71.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:75.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:76.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:77.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:78.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:79.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:80.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:81.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:82.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:83.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:84.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:85.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:89.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:90.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:91.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:92.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:93.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:94.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:95.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:96.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:97.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:98.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:99.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:103.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:104.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:105.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:106.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:107.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:108.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:109.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:110.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:111.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:112.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:113.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:117.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:118.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:119.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:120.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:121.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:122.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:123.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:124.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:125.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:126.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:127.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:131.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:132.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:133.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:134.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:135.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:136.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:137.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:138.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:139.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:140.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:141.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:145.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:146.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:147.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:148.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:149.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:150.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:151.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:152.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:153.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:154.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:155.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:159.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:160.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:161.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:162.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:163.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:164.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:165.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:166.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:167.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:168.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:169.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:173.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:174.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:175.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:176.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:177.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:178.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:179.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:180.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:181.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:182.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:183.
Warning: wire '\sel_lomem_n' is assigned in a block at src/hc21_ste_decoder.v:187.
Warning: wire '\sel_stebus_n' is assigned in a block at src/hc21_ste_decoder.v:188.
Warning: wire '\sel_mmu_a_n' is assigned in a block at src/hc21_ste_decoder.v:189.
Warning: wire '\sel_mmu_b_n' is assigned in a block at src/hc21_ste_decoder.v:190.
Warning: wire '\sel_ctc_n' is assigned in a block at src/hc21_ste_decoder.v:191.
Warning: wire '\sel_pio_n' is assigned in a block at src/hc21_ste_decoder.v:192.
Warning: wire '\sel_sio_n' is assigned in a block at src/hc21_ste_decoder.v:193.
Warning: wire '\sel_dev0_n' is assigned in a block at src/hc21_ste_decoder.v:194.
Warning: wire '\sel_dev1_n' is assigned in a block at src/hc21_ste_decoder.v:195.
Warning: wire '\sel_dev2_n' is assigned in a block at src/hc21_ste_decoder.v:196.
Warning: wire '\sel_himem_n' is assigned in a block at src/hc21_ste_decoder.v:197.
Successfully finished Verilog frontend.

-- Running command `synth' --

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$src/hc21_ste_decoder.v:31$1 in module hc21_ste_decoder.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
     1/11: $0\sel_himem_n[0:0]
     2/11: $0\sel_dev2_n[0:0]
     3/11: $0\sel_dev1_n[0:0]
     4/11: $0\sel_dev0_n[0:0]
     5/11: $0\sel_stebus_n[0:0]
     6/11: $0\sel_lomem_n[0:0]
     7/11: $0\sel_mmu_b_n[0:0]
     8/11: $0\sel_mmu_a_n[0:0]
     9/11: $0\sel_sio_n[0:0]
    10/11: $0\sel_pio_n[0:0]
    11/11: $0\sel_ctc_n[0:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\hc21_ste_decoder.\sel_ctc_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$371' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_pio_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$372' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_sio_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$373' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_mmu_a_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$374' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_mmu_b_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$375' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_lomem_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$376' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_stebus_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$377' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_dev0_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$378' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_dev1_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$379' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_dev2_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$380' with positive edge clock.
Creating register for signal `\hc21_ste_decoder.\sel_himem_n' using process `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
  created $dff cell `$procdff$381' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 11 empty switches in `\hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
Removing empty process `hc21_ste_decoder.$proc$src/hc21_ste_decoder.v:31$1'.
Cleaned up 11 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..
Removed 0 unused cells and 132 unused wires.
<suppressed ~1 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module hc21_ste_decoder..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \hc21_ste_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \hc21_ste_decoder.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 8) from port B of cell hc21_ste_decoder.$le$src/hc21_ste_decoder.v:45$3 ($le).
Removed top 7 bits (of 8) from port B of cell hc21_ste_decoder.$ge$src/hc21_ste_decoder.v:45$2 ($ge).
Removed top 1 bits (of 8) from port B of cell hc21_ste_decoder.$ge$src/hc21_ste_decoder.v:59$5 ($ge).
Removed top 1 bits (of 8) from port B of cell hc21_ste_decoder.$ge$src/hc21_ste_decoder.v:185$16 ($ge).
Removed top 1 bits (of 8) from port B of cell hc21_ste_decoder.$le$src/hc21_ste_decoder.v:185$17 ($le).

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~228 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module hc21_ste_decoder:
  creating $alu model for $ge$src/hc21_ste_decoder.v:185$16 ($ge): new $alu
  creating $alu model for $ge$src/hc21_ste_decoder.v:45$2 ($ge): new $alu
  creating $alu model for $ge$src/hc21_ste_decoder.v:59$5 ($ge): new $alu
  creating $alu model for $le$src/hc21_ste_decoder.v:185$17 ($le): new $alu
  creating $alu model for $le$src/hc21_ste_decoder.v:45$3 ($le): new $alu
  creating $alu model for $le$src/hc21_ste_decoder.v:59$6 ($le): new $alu
  creating $alu cell for $le$src/hc21_ste_decoder.v:59$6: $auto$alumacc.cc:474:replace_alu$388
  creating $alu cell for $le$src/hc21_ste_decoder.v:45$3: $auto$alumacc.cc:474:replace_alu$397
  creating $alu cell for $le$src/hc21_ste_decoder.v:185$17: $auto$alumacc.cc:474:replace_alu$410
  creating $alu cell for $ge$src/hc21_ste_decoder.v:59$5: $auto$alumacc.cc:474:replace_alu$423
  creating $alu cell for $ge$src/hc21_ste_decoder.v:45$2: $auto$alumacc.cc:474:replace_alu$432
  creating $alu cell for $ge$src/hc21_ste_decoder.v:185$16: $auto$alumacc.cc:474:replace_alu$441
  created 6 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \hc21_ste_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \hc21_ste_decoder.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$395: { $auto$rtlil.cc:1832:Not$392 $auto$rtlil.cc:1835:ReduceAnd$394 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$421: { $auto$rtlil.cc:1832:Not$420 $auto$rtlil.cc:1835:ReduceAnd$414 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$393: { $auto$alumacc.cc:490:replace_alu$389 [0] $auto$alumacc.cc:490:replace_alu$389 [1] $auto$alumacc.cc:490:replace_alu$389 [2] $auto$alumacc.cc:490:replace_alu$389 [3] $auto$alumacc.cc:490:replace_alu$389 [4] $auto$alumacc.cc:490:replace_alu$389 [5] $auto$alumacc.cc:490:replace_alu$389 [6] $auto$alumacc.cc:490:replace_alu$389 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$400: { $auto$alumacc.cc:490:replace_alu$398 [0] $auto$alumacc.cc:490:replace_alu$398 [1] $auto$alumacc.cc:490:replace_alu$398 [2] $auto$alumacc.cc:490:replace_alu$398 [3] $auto$alumacc.cc:490:replace_alu$398 [4] $auto$alumacc.cc:490:replace_alu$398 [5] $auto$alumacc.cc:490:replace_alu$398 [6] $auto$alumacc.cc:490:replace_alu$398 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$413: { $auto$alumacc.cc:490:replace_alu$411 [0] $auto$alumacc.cc:490:replace_alu$411 [1] $auto$alumacc.cc:490:replace_alu$411 [2] $auto$alumacc.cc:490:replace_alu$411 [3] $auto$alumacc.cc:490:replace_alu$411 [4] $auto$alumacc.cc:490:replace_alu$411 [5] $auto$alumacc.cc:490:replace_alu$411 [6] $auto$alumacc.cc:490:replace_alu$411 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$428: { $auto$alumacc.cc:490:replace_alu$424 [0] $auto$alumacc.cc:490:replace_alu$424 [1] $auto$alumacc.cc:490:replace_alu$424 [2] $auto$alumacc.cc:490:replace_alu$424 [3] $auto$alumacc.cc:490:replace_alu$424 [4] $auto$alumacc.cc:490:replace_alu$424 [5] $auto$alumacc.cc:490:replace_alu$424 [6] $auto$alumacc.cc:490:replace_alu$424 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$437: { $auto$alumacc.cc:490:replace_alu$433 [0] $auto$alumacc.cc:490:replace_alu$433 [1] $auto$alumacc.cc:490:replace_alu$433 [2] $auto$alumacc.cc:490:replace_alu$433 [3] $auto$alumacc.cc:490:replace_alu$433 [4] $auto$alumacc.cc:490:replace_alu$433 [5] $auto$alumacc.cc:490:replace_alu$433 [6] $auto$alumacc.cc:490:replace_alu$433 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$446: { $auto$alumacc.cc:490:replace_alu$442 [0] $auto$alumacc.cc:490:replace_alu$442 [1] $auto$alumacc.cc:490:replace_alu$442 [2] $auto$alumacc.cc:490:replace_alu$442 [3] $auto$alumacc.cc:490:replace_alu$442 [4] $auto$alumacc.cc:490:replace_alu$442 [5] $auto$alumacc.cc:490:replace_alu$442 [6] $auto$alumacc.cc:490:replace_alu$442 [7] }
  Optimizing cells in module \hc21_ste_decoder.
Performed a total of 8 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \hc21_ste_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \hc21_ste_decoder.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.
<suppressed ~110 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \hc21_ste_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \hc21_ste_decoder.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.20.9. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~553 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.
<suppressed ~244 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
<suppressed ~549 debug messages>
Removed a total of 183 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..
Removed 59 unused cells and 293 unused wires.
<suppressed ~60 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\hc21_ste_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 246 gates and 267 wires to a netlist network with 19 inputs and 11 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:              AOI3 cells:       12
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               NOR cells:       20
ABC RESULTS:               NOT cells:       10
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:       89
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:        internal signals:      237
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       11
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module hc21_ste_decoder.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\hc21_ste_decoder'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hc21_ste_decoder..
Removed 0 unused cells and 234 unused wires.
<suppressed ~1 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== hc21_ste_decoder ===

   Number of wires:                197
   Number of wire bits:            204
   Number of public wires:          13
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                195
     $_ANDNOT_                      21
     $_AND_                          2
     $_AOI3_                        12
     $_AOI4_                         1
     $_DFF_P_                       11
     $_NAND_                         7
     $_NOR_                         20
     $_NOT_                         10
     $_OAI3_                         9
     $_OAI4_                         2
     $_ORNOT_                       11
     $_OR_                          89

2.27. Executing CHECK pass (checking for obvious problems).
checking module hc21_ste_decoder..
found and reported 0 problems.

-- Writing to `output/hc21_ste_decoder.blif' using backend `blif' --

3. Executing BLIF backend.

Warnings: 121 unique messages, 121 total
End of script. Logfile hash: 0f1e3be20f
CPU: user 0.30s system 0.00s, MEM: 19.63 MB total, 13.67 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 15x opt_clean (0 sec), 18% 12x opt_merge (0 sec), ...
