
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `src/mmu.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: src/mmu.v
Parsing Verilog input from `src/mmu.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (src/mmu.v:20)
Warning: Yosys has only limited support for tri-state logic at the moment. (src/mmu.v:21)
Generating RTLIL representation for module `\mmu'.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:33.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:37.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:44.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:48.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:55.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:59.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:66.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:70.
Warning: wire '\addr_bus' is assigned in a block at src/mmu.v:74.
Successfully finished Verilog frontend.

-- Running command `synth' --

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$src/mmu.v:83$26 in module mmu.
Removed 1 dead cases from process $proc$src/mmu.v:24$21 in module mmu.
Marked 6 switch rules as full_case in process $proc$src/mmu.v:24$21 in module mmu.
Removed a total of 1 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\mmu.$proc$src/mmu.v:83$26'.

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mmu.$proc$src/mmu.v:83$26'.
     1/5: $0\write_ar3[6:0]
     2/5: $0\write_ar2[6:0]
     3/5: $0\write_ar1[6:0]
     4/5: $0\write_ar0[6:0]
     5/5: $0\write_cr0[3:0]
Creating decoders for process `\mmu.$proc$src/mmu.v:24$21'.
     1/7: $6\addr_bus[0:0]
     2/7: $5\addr_bus[0:0]
     3/7: $4\addr_bus[0:0]
     4/7: $3\addr_bus[0:0]
     5/7: $2\addr_bus[0:0]
     6/7: $1\addr_bus[0:0]
     7/7: $0\addr_bus[0:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\mmu.\addr_bus' from process `\mmu.$proc$src/mmu.v:24$21': $auto$proc_dlatch.cc:409:proc_dlatch$124

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mmu.\write_cr0' using process `\mmu.$proc$src/mmu.v:83$26'.
  created $adff cell `$procdff$125' with positive edge clock and negative level reset.
Creating register for signal `\mmu.\write_ar0' using process `\mmu.$proc$src/mmu.v:83$26'.
  created $dff cell `$procdff$126' with positive edge clock.
Creating register for signal `\mmu.\write_ar1' using process `\mmu.$proc$src/mmu.v:83$26'.
  created $dff cell `$procdff$127' with positive edge clock.
Creating register for signal `\mmu.\write_ar2' using process `\mmu.$proc$src/mmu.v:83$26'.
  created $dff cell `$procdff$128' with positive edge clock.
Creating register for signal `\mmu.\write_ar3' using process `\mmu.$proc$src/mmu.v:83$26'.
  created $dff cell `$procdff$129' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\mmu.$proc$src/mmu.v:83$26'.
Removing empty process `mmu.$proc$src/mmu.v:83$26'.
Found and cleaned up 6 empty switches in `\mmu.$proc$src/mmu.v:24$21'.
Removing empty process `mmu.$proc$src/mmu.v:24$21'.
Cleaned up 8 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.
<suppressed ~16 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..
Removed 6 unused cells and 53 unused wires.
<suppressed ~11 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module mmu..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mmu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mmu.
    New ctrl vector for $pmux cell $procmux$104: { $procmux$107_CMP $procmux$106_CMP $procmux$105_CMP }
    New ctrl vector for $pmux cell $procmux$58: $auto$opt_reduce.cc:132:opt_mux$131
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$130: { $procmux$39_CMP $procmux$33_CMP $procmux$46_CMP $procmux$54_CMP }
  Optimizing cells in module \mmu.
Performed a total of 3 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..
Removed 1 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mmu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mmu.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 6 bits (of 7) from mux cell mmu.$ternary$src/mmu.v:22$20 ($mux).
Removed top 2 bits (of 3) from port B of cell mmu.$eq$src/mmu.v:22$12 ($eq).
Removed top 1 bits (of 3) from port B of cell mmu.$eq$src/mmu.v:22$13 ($eq).
Removed top 1 bits (of 3) from port B of cell mmu.$eq$src/mmu.v:22$14 ($eq).
Removed top 6 bits (of 7) from mux cell mmu.$ternary$src/mmu.v:22$19 ($mux).
Removed top 1 bits (of 4) from port B of cell mmu.$procmux$33_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell mmu.$procmux$39_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell mmu.$procmux$54_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell mmu.$procmux$46_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell mmu.$procmux$107_CMP0 ($eq).
Removed top 6 bits (of 7) from mux cell mmu.$ternary$src/mmu.v:22$18 ($mux).
Removed top 6 bits (of 7) from mux cell mmu.$ternary$src/mmu.v:22$17 ($mux).
Removed top 6 bits (of 7) from wire mmu.$ternary$src/mmu.v:22$17_Y.
Removed top 6 bits (of 7) from wire mmu.$ternary$src/mmu.v:22$18_Y.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~116 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mmu:
  created 0 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mmu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mmu.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$130: { $eq$src/mmu.v:22$12_Y $eq$src/mmu.v:22$13_Y $eq$src/mmu.v:22$14_Y $eq$src/mmu.v:22$15_Y }
  Optimizing cells in module \mmu.
Performed a total of 1 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mmu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mmu.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.
<suppressed ~6 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mmu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mmu.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.

2.20.9. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~57 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.
<suppressed ~45 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..
Removed 72 unused cells and 23 unused wires.
<suppressed ~73 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\mmu' to `<abc-temp-dir>/input.blif'..
Extracted 67 gates and 87 wires to a netlist network with 18 inputs and 11 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:              AOI3 cells:        3
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       15
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:        internal signals:       58
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       11
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mmu.
<suppressed ~5 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mmu'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mmu..
Removed 1 unused cells and 77 unused wires.
<suppressed ~2 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== mmu ===

   Number of wires:                 61
   Number of wire bits:            132
   Number of public wires:          18
   Number of public wire bits:      62
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $_ANDNOT_                       4
     $_AND_                          5
     $_AOI3_                         3
     $_AOI4_                         1
     $_DFF_PN0_                      4
     $_DFF_P_                        4
     $_DLATCH_P_                     1
     $_MUX_                         15
     $_NAND_                         2
     $_NOR_                          7
     $_NOT_                          3
     $_OAI3_                         1
     $_ORNOT_                        4
     $_OR_                           2

2.27. Executing CHECK pass (checking for obvious problems).
checking module mmu..
found and reported 0 problems.

-- Writing to `output/mmu.blif' using backend `blif' --

3. Executing BLIF backend.

Warnings: 11 unique messages, 11 total
End of script. Logfile hash: 9e85a0a9fc
CPU: user 0.13s system 0.00s, MEM: 16.06 MB total, 10.91 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 23% 15x opt_clean (0 sec), 18% 13x opt_expr (0 sec), ...
